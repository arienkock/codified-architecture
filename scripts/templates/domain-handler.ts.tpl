/**
 * This file was auto-generated by scripts/generate-openapi-handlers.ts.
 * Modifications should be made in the generator or its template.
 */

import { z } from 'zod';
import { HandlerContract } from '../../handlerContract.js';
{{ADDITIONAL_IMPORTS}}
// Domain schemas are accessed via the namespace import inserted above.

const pathParamsSchema = {{PATH_PARAMS_SCHEMA}};
const queryParamsSchema = {{QUERY_PARAMS_SCHEMA}};
const headerParamsSchema = {{HEADER_PARAMS_SCHEMA}};
const requestBodySchema = {{REQUEST_BODY_SCHEMA}};

const responseSchemas = {
{{RESPONSE_SCHEMAS}}
} as const;

export type {{HANDLER_NAME}}PathParams = z.infer<typeof pathParamsSchema>;
export type {{HANDLER_NAME}}QueryParams = z.infer<typeof queryParamsSchema>;
export type {{HANDLER_NAME}}HeaderParams = z.infer<typeof headerParamsSchema>;
export type {{HANDLER_NAME}}RequestBody = z.infer<typeof requestBodySchema>;
export type {{HANDLER_NAME}}ResponseStatus = keyof typeof responseSchemas;
export type {{HANDLER_NAME}}ResponseBodies = {
{{HANDLER_RESPONSE_TYPE_MAP}}
};

// Discriminated union type for type-safe responses
export type {{HANDLER_NAME}}Response = {{HANDLER_RESPONSE_UNION}};

export const {{HANDLER_VAR_NAME}}: HandlerContract<
  {{HANDLER_NAME}}PathParams,
  {{HANDLER_NAME}}QueryParams,
  {{HANDLER_NAME}}HeaderParams,
  {{HANDLER_NAME}}RequestBody,
  {{HANDLER_NAME}}Response
> = {
  method: '{{HTTP_METHOD}}' as const,
  path: '{{PATH}}' as const,
  pathParamsSchema,
  queryParamsSchema,
  headerParamsSchema,
  requestBodySchema,
  responseSchemas,
  parsePathParams(input: unknown) {
    return pathParamsSchema.parse(input);
  },
  parseQueryParams(input: unknown) {
    return queryParamsSchema.parse(input);
  },
  parseHeaderParams(input: unknown) {
    return headerParamsSchema.parse(input);
  },
  parseRequestBody(input: unknown) {
    return requestBodySchema.parse(input);
  },
  async handle(params) {
    // Convention-based domain handler invocation
    // Domain handler should be located at: src/domain/handlers/{{HANDLER_NAME}}.ts
    // and export a function named: handle{{HANDLER_NAME}}
    try {
      const domainHandler = await import('../../../domain/handlers/{{HANDLER_NAME}}.js');
      const handlerFunction = domainHandler.handle{{HANDLER_NAME}};
      
      if (typeof handlerFunction !== 'function') {
        throw new Error(
          `Domain handler function 'handle{{HANDLER_NAME}}' not found in src/domain/handlers/{{HANDLER_NAME}}.ts`
        );
      }

      // Create a minimal request context
      // TODO: Populate with actual app context from request
      const requestContext = {
        app: {}
      };

      return await handlerFunction({
        pathParams: params.pathParams,
        queryParams: params.queryParams,
        headerParams: params.headerParams,
        requestBody: params.requestBody,
        requestContext,
      });
    } catch (error) {
      if ((error as NodeJS.ErrnoException).code === 'ERR_MODULE_NOT_FOUND') {
        throw new Error(
          `Domain handler not implemented. Please create: src/domain/handlers/{{HANDLER_NAME}}.ts\n` +
          `with an exported function: export async function handle{{HANDLER_NAME}}(params) { ... }`
        );
      }
      throw error;
    }
  },
};
