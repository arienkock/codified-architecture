/**
 * This file was auto-generated by scripts/generate-openapi-handlers.ts.
 * Modifications should be made in the generator or its template.
 */

import { z } from 'zod';
import { HandlerContract } from '../../handlerContract';
import * as DomainSeamTypes from '../../../domain-seam/types';
// Domain schemas are accessed via the namespace import inserted above.

const pathParamsSchema = z.object({
  "id": z.number().int().describe("The ID of the user to update")
}).strict();
const queryParamsSchema = z.object({});
const headerParamsSchema = z.object({});
const requestBodySchema = DomainSeamTypes.UserUpdateRequestSchema;

const responseSchemas = {
  "200": DomainSeamTypes.UserUpdateUseCaseResponseSchema,
  "400": DomainSeamTypes.ErrorResponseSchema,
  "401": DomainSeamTypes.ErrorResponseSchema,
  "403": DomainSeamTypes.ErrorResponseSchema,
  "404": DomainSeamTypes.ErrorResponseSchema,
  "422": DomainSeamTypes.ErrorResponseSchema,
  "500": DomainSeamTypes.ErrorResponseSchema,
} as const;

export type PatchUsersIdHandlerPathParams = z.infer<typeof pathParamsSchema>;
export type PatchUsersIdHandlerQueryParams = z.infer<typeof queryParamsSchema>;
export type PatchUsersIdHandlerHeaderParams = z.infer<typeof headerParamsSchema>;
export type PatchUsersIdHandlerRequestBody = z.infer<typeof requestBodySchema>;
export type PatchUsersIdHandlerResponseStatus = keyof typeof responseSchemas;
export type PatchUsersIdHandlerResponseBodies = {
  "200": z.infer<(typeof responseSchemas)["200"]>;
  "400": z.infer<(typeof responseSchemas)["400"]>;
  "401": z.infer<(typeof responseSchemas)["401"]>;
  "403": z.infer<(typeof responseSchemas)["403"]>;
  "404": z.infer<(typeof responseSchemas)["404"]>;
  "422": z.infer<(typeof responseSchemas)["422"]>;
  "500": z.infer<(typeof responseSchemas)["500"]>;
};

// Discriminated union type for type-safe responses
export type PatchUsersIdHandlerResponse = { status: "200"; body: PatchUsersIdHandlerResponseBodies["200"] } | { status: "400"; body: PatchUsersIdHandlerResponseBodies["400"] } | { status: "401"; body: PatchUsersIdHandlerResponseBodies["401"] } | { status: "403"; body: PatchUsersIdHandlerResponseBodies["403"] } | { status: "404"; body: PatchUsersIdHandlerResponseBodies["404"] } | { status: "422"; body: PatchUsersIdHandlerResponseBodies["422"] } | { status: "500"; body: PatchUsersIdHandlerResponseBodies["500"] };

export const patchUsersIdHandler: HandlerContract<
  PatchUsersIdHandlerPathParams,
  PatchUsersIdHandlerQueryParams,
  PatchUsersIdHandlerHeaderParams,
  PatchUsersIdHandlerRequestBody,
  PatchUsersIdHandlerResponse
> = {
  method: 'PATCH' as const,
  path: '/users/{id}' as const,
  pathParamsSchema,
  queryParamsSchema,
  headerParamsSchema,
  requestBodySchema,
  responseSchemas,
  parsePathParams(input: unknown) {
    return pathParamsSchema.parse(input);
  },
  parseQueryParams(input: unknown) {
    return queryParamsSchema.parse(input);
  },
  parseHeaderParams(input: unknown) {
    return headerParamsSchema.parse(input);
  },
  parseRequestBody(input: unknown) {
    return requestBodySchema.parse(input);
  },
  async handle(params) {
    // Convention-based domain handler invocation
    // Domain handler should be located at: src/domain/handlers/PatchUsersIdHandler.ts
    // and export a function named: handleRequest
    try {
      const domainHandler = await import('../../../domain/handlers/PatchUsersIdHandler');
      const handlerFunction = domainHandler.handleRequest;
      
      if (typeof handlerFunction !== 'function') {
        throw new Error(
          `Domain handler function 'handleRequest' not found in src/domain/handlers/PatchUsersIdHandler.ts`
        );
      }

      // Create a minimal request context
      // TODO: Populate with actual app context from request
      const requestContext = {
        app: {}
      };

      return await handlerFunction({
        pathParams: params.pathParams,
        queryParams: params.queryParams,
        headerParams: params.headerParams,
        requestBody: params.requestBody,
        requestContext,
      });
    } catch (error) {
      if ((error as NodeJS.ErrnoException).code === 'ERR_MODULE_NOT_FOUND') {
        throw new Error(
          `Domain handler not implemented. Please create: src/domain/handlers/PatchUsersIdHandler.ts\n` +
          `with an exported function: export async function handleRequest(params) { ... }`
        );
      }
      throw error;
    }
  },
};
