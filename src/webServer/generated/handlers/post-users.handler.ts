/**
 * This file was auto-generated by scripts/generate-openapi-handlers.ts.
 * Modifications should be made in the generator or its template.
 */

import { z } from 'zod';

const pathParamsSchema = z.object({});
const queryParamsSchema = z.object({});
const headerParamsSchema = z.object({});
const requestBodySchema = z.object({
  "email": z.string(),
  "name": z.string().nullable().optional(),
  "password": z.string().min(12).describe("Plain text password that is hashed before persistence.")
}).strict().describe("User creation payload.");

const responseSchemas = {
  "201": z.object({
      "id": z.number().int().min(-9007199254740991).max(9007199254740991),
      "email": z.string(),
      "name": z.string().nullable()
    }).strict().describe("Representation of the newly created user."),
  "400": z.undefined().describe("The request payload was invalid."),
  "401": z.undefined().describe("The request was not authorized."),
} as const;

export type PostUsersHandlerPathParams = z.infer<typeof pathParamsSchema>;
export type PostUsersHandlerQueryParams = z.infer<typeof queryParamsSchema>;
export type PostUsersHandlerHeaderParams = z.infer<typeof headerParamsSchema>;
export type PostUsersHandlerRequestBody = z.infer<typeof requestBodySchema>;
export type PostUsersHandlerResponseStatus = keyof typeof responseSchemas;
export type PostUsersHandlerResponseBodies = {
  "201": z.infer<(typeof responseSchemas)["201"]>;
  "400": z.infer<(typeof responseSchemas)["400"]>;
  "401": z.infer<(typeof responseSchemas)["401"]>;
};

export const postUsersHandler = {
  method: 'POST' as const,
  path: '/users' as const,
  pathParamsSchema,
  queryParamsSchema,
  headerParamsSchema,
  requestBodySchema,
  responseSchemas,
  parsePathParams(input: unknown) {
    return pathParamsSchema.parse(input);
  },
  parseQueryParams(input: unknown) {
    return queryParamsSchema.parse(input);
  },
  parseHeaderParams(input: unknown) {
    return headerParamsSchema.parse(input);
  },
  parseRequestBody(input: unknown) {
    return requestBodySchema.parse(input);
  },
  parseResponse<TStatus extends keyof typeof responseSchemas>(status: TStatus, payload: unknown) {
    const schema = responseSchemas[status];
    if (!schema) {
      throw new Error(`Unsupported status code: ${status}`);
    }
    return schema.parse(payload);
  },
};
