/**
 * This file was auto-generated by scripts/generate-openapi-handlers.ts.
 * Modifications should be made in the generator or its template.
 */

import { z } from 'zod';
import { HandlerContract } from '../../handlerContract.js';
import * as DomainSeamTypes from '../../../domain-seam/types';
// Domain schemas are accessed via the namespace import inserted above.

const pathParamsSchema = z.object({});
const queryParamsSchema = z.object({});
const headerParamsSchema = z.object({});
const requestBodySchema = DomainSeamTypes.UserCreateRequestSchema;

const responseSchemas = {
  "201": DomainSeamTypes.UserCreateResponseSchema,
  "400": z.undefined().describe("The request payload was invalid."),
} as const;

export type PostUsersHandlerPathParams = z.infer<typeof pathParamsSchema>;
export type PostUsersHandlerQueryParams = z.infer<typeof queryParamsSchema>;
export type PostUsersHandlerHeaderParams = z.infer<typeof headerParamsSchema>;
export type PostUsersHandlerRequestBody = z.infer<typeof requestBodySchema>;
export type PostUsersHandlerResponseStatus = keyof typeof responseSchemas;
export type PostUsersHandlerResponseBodies = {
  "201": z.infer<(typeof responseSchemas)["201"]>;
  "400": z.infer<(typeof responseSchemas)["400"]>;
};

// Discriminated union type for type-safe responses
export type PostUsersHandlerResponse = { status: "201"; body: PostUsersHandlerResponseBodies["201"] } | { status: "400"; body: PostUsersHandlerResponseBodies["400"] };

export const postUsersHandler: HandlerContract<
  PostUsersHandlerPathParams,
  PostUsersHandlerQueryParams,
  PostUsersHandlerHeaderParams,
  PostUsersHandlerRequestBody,
  PostUsersHandlerResponse
> = {
  method: 'POST' as const,
  path: '/users' as const,
  pathParamsSchema,
  queryParamsSchema,
  headerParamsSchema,
  requestBodySchema,
  responseSchemas,
  parsePathParams(input: unknown) {
    return pathParamsSchema.parse(input);
  },
  parseQueryParams(input: unknown) {
    return queryParamsSchema.parse(input);
  },
  parseHeaderParams(input: unknown) {
    return headerParamsSchema.parse(input);
  },
  parseRequestBody(input: unknown) {
    return requestBodySchema.parse(input);
  },
  async handle(params) {
    // TODO: Implement domain logic here
    // This is a placeholder that should be replaced with actual use case invocation
    
    // Example: Return a 201 response with properly typed body
    // TypeScript will enforce that the body matches UserCreateResponse schema
    return {
      status: "201" as const,
      body: {
        id: 1,
        email: params.requestBody.email,
        name: params.requestBody.name ?? null,  // Convert undefined to null to match schema
        hashedPassword: "hashed_" + params.requestBody.password,
      }
    };
    
    // Example: If you wanted to return a 400 error instead:
    // return {
    //   status: "400" as const,
    //   body: undefined  // TypeScript enforces this must be undefined for 400
    // };
    
    // Note: If you try to return the wrong body type for a status code,
    // TypeScript will show a compile error. For example, this would fail:
    // return { status: "400", body: { id: 1 } };  // ERROR: body must be undefined for 400
  },
};
