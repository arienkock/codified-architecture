/**
 * This file was auto-generated by scripts/generate-openapi-handlers.ts.
 * Modifications should be made in the generator or its template.
 */

import { z } from 'zod';
import * as DomainSeamTypes from '../../../domain-seam/types';
import { HandlerContract } from '../../handlerContract';
// Domain schemas are accessed via the namespace import inserted above.

const pathParamsSchema = z.object({});
const queryParamsSchema = z.object({});
const headerParamsSchema = z.object({});
const requestBodySchema = DomainSeamTypes.UserCreateRequestSchema;

const responseSchemas = {
  "201": DomainSeamTypes.UserCreateResponseSchema,
  "400": z.undefined().describe("The request payload was invalid."),
} as const;

export type PostUsersHandlerPathParams = z.infer<typeof pathParamsSchema>;
export type PostUsersHandlerQueryParams = z.infer<typeof queryParamsSchema>;
export type PostUsersHandlerHeaderParams = z.infer<typeof headerParamsSchema>;
export type PostUsersHandlerRequestBody = z.infer<typeof requestBodySchema>;
export type PostUsersHandlerResponseStatus = keyof typeof responseSchemas;
export type PostUsersHandlerResponseBodies = {
  "201": z.infer<(typeof responseSchemas)["201"]>;
  "400": z.infer<(typeof responseSchemas)["400"]>;
};

export const postUsersHandler: HandlerContract = {
  method: 'POST' as const,
  path: '/users' as const,
  pathParamsSchema,
  queryParamsSchema,
  headerParamsSchema,
  requestBodySchema,
  responseSchemas,
  parsePathParams(input: unknown) {
    return pathParamsSchema.parse(input);
  },
  parseQueryParams(input: unknown) {
    return queryParamsSchema.parse(input);
  },
  parseHeaderParams(input: unknown) {
    return headerParamsSchema.parse(input);
  },
  parseRequestBody(input: unknown) {
    return requestBodySchema.parse(input);
  },
  parseResponse<TStatus extends keyof typeof responseSchemas>(status: TStatus, payload: unknown) {
    const schema = responseSchemas[status];
    if (!schema) {
      throw new Error(`Unsupported status code: ${status}`);
    }
    return schema.parse(payload);
  },
};
